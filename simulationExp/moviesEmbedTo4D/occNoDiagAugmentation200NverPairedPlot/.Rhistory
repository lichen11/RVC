adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
png(paste0(movie.dir4, sprintf("noAugmentedAbsASEFlipRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(abs(ase), col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir4)
system("convert -delay 150 *.png flipNoDiagAugAbsASEmovie.gif")
movie.dir4
setwd(movie.dir4)
system("convert -delay 150 *.png flipNoDiagAugAbsASEmovie.gif")
dir.create(movie.dir4)
fig.dir = "~/Dropbox/Research/Robust_est/Real_data_exp/Figs/"
Aall = read.csv(file="~/Dropbox/Research/Robust_est/Real_data_exp/enron/Aall-184x184(noRowColNames).csv",
header=F, sep=",")
names(Aall) = NULL
rownames(Aall) = NULL
colnames(Aall) = NULL
source("~/Dropbox/Research/Local embedding/stfp.R")
source("~/Dropbox/Research/Robust_est/Real_data_exp/getElbows.R")
inverse.rdpg = function(A, dim, G = NULL, scaling = FALSE){
if(is.list(A)){
for(i in 1:length(A)){
if(i == 1){
X <- svd.extract(A[[i]], dim, scaling)
}
else{
X <- cbind(X, svd.extract(A[[i]], dim, scaling))
}
}
}
else{
X <- svd.extract(A, dim, scaling)
}
# X.mclust <- Mclust(X, G)
# return(list(X = X, cluster = X.mclust))
return(X = X)
}
svd.extract = function(A, dim = NULL,scaling = FALSE){
L <- nonpsd.laplacian(A)
L.svd <- svd(L)
if(is.null(dim))
dim <- scree.thresh(L.svd$d)
L.svd.values <- L.svd$d[1:dim]
L.svd.vectors <- L.svd$v[,1:dim]
if(scaling == TRUE){
if(dim == 1)
L.coords <- sqrt(L.svd.values) * L.svd.vectors
else
L.coords <- L.svd.vectors %*% diag(sqrt(L.svd.values))
}
else{
L.coords <- L.svd.vectors
}
return(L.coords)
}
tmp = svd(Aall)
getElbows(tmp$d, 3)
Aall = as.matrix(Aall)
Xhat = inverse.rdpg(as.matrix(Aall), 10, G = NULL)
plot(Xhat[,1:2])
plot(Xhat[,1:10])
plot(Xhat)
Xhat
2dASE = inverse.rdpg(as.matrix(Aall), 2, G = NULL)
ASE2d = inverse.rdpg(as.matrix(Aall), 2, G = NULL)
plot(ASE2d)
ASE2d
ASE2d = inverse.rdpg(as.matrix(Aall), 2, G = NULL)
plot(ASE2d)
mclustModelonASE2d = Mclust(ASE2d, 2)
fig.dir
pdf(paste0(fig.dir, "enronMclustOnASE2d.pdf"))
plot(mclustModelonASE2d)
dev.off()
mclustModelonASE2d = Mclust(ASE2d)
mclustModelonASE2d$cl
pdf(paste0(fig.dir, "enronMclustOnASE2d4Clust.pdf"))
plot(mclustModelonASE2d)
dev.off()
pdf(paste0(fig.dir, "enronMclustOnASE2d4Clust.pdf"))
plot(mclustModelonASE2d)
dev.off()
dev.off()
fig.dir
plot(ASE2d)
Xhat = inverse.rdpg(as.matrix(Aall), 10, G = NULL)
plot(Xhat)
mclustModel = Mclust(Xhat, 2) # without specifying, it is 5 componenets
plot(Xhat, col = mclustModel+1)
plot(Xhat, col = mclustModel$classification+1)
plot(Xhat, col = mclustModel$classification+1, pch = mclustModel$classification+1)
plot(Xhat, col = mclustModel$classification+1, pch = mclustModel$classification,
xlab = "ASE1", ylab = "ASE2")
fig.dir
png(paste0(fig.dir, "enronASEPlotWithTwoClasses.png"))
plot(Xhat, col = mclustModel$classification+1, pch = mclustModel$classification,
xlab = "ASE1", ylab = "ASE2")
dev.odd()
dev.off()
dim(Xhat)
data.dir = "~Dropbox/Research/Robust_est/Real_data_exp/Celegans/"
load(paste0(data.dir, "herm_Graph.Rd"))
paste0(data.dir, "herm_Graph.Rd")
load(paste0(data.dir, "herm_Graph.Rd"))
data.dir = "~/Dropbox/Research/Robust_est/Real_data_exp/Celegans/"
load(paste0(data.dir, "herm_Graph.Rd"))
sum(Ac)
sum(Ag)
Ac
Ag
tmp = svd(Ag)
getElbows(tmp$d, 3)
Xhat = inverse.rdpg(as.matrix(Ag), 13, G = NULL)
plot(Xhat,
xlab = "ASE1", ylab = "ASE2")
Xhat
Xhat = inverse.rdpg(as.matrix(Ag), 2, G = NULL)
plot(Xhat,
xlab = "ASE1", ylab = "ASE2")
install.packages("rgl")
require("rgl")
Xhat = inverse.rdpg(as.matrix(Ag), 3, G = NULL)
plot3d(Xhat)
png(paste0(fig.dir, "cElegansASEPlotWithTwoClasses.png"))
plot(Xhat,
xlab = "ASE1", ylab = "ASE2")
dir.create("~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/")
movie.dir = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/"
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentation/"
movie.dir3= "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentationAbsASE/"
rg.sample
rg.sample = function(P){
n <-  nrow(P)
U <- matrix(0, nrow = n, ncol = n)
set.seed(88)
U[col(U) > row(U)] <- runif(n*(n-1)/2)
U <- (U + t(U))
A <- (U < P) + 0 ;
diag(A) <- 0
return(A)
}
sampleSBMfromTrueLatentPosition = function(n, rho, centers){
set.seed(88)
x1 = centers[1,]
x2 = centers[2,]
priorVec  = rbern(n, rho[2])
tau = priorVec + 1
trueLatentPosition = priorVec %*% t(x2) + (1 - priorVec) %*% t(x1)
P = trueLatentPosition %*% t(trueLatentPosition)
A = rg.sample(P)
return(list(adjacency = A, tau = tau))
}
rho = c(0.4, 0.6)
n = 500
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
plot(centers)
dev.off()
plot(centers)
plot(abs(centers))
plot(centers)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
spectralDecompAugmented = eigen(diagAugmentation(simGraph$adjacency))
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
aseAugmented = spectralDecompAugmented$vectors[,1:2] %*% diag(sqrt(spectralDecompAugmented$values[1:2]))
plot(ase)
plot(abs(ase))
plot(centers)
spectralDecomp$values
max(spectralDecomp$values)
max(abs(spectralDecomp$values))
B= matrix(c(0.42, 0.42, 0.42, 0.5), 2,2)
rho = c(0.6, 0.4)
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
centers
plot(centers)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
spectralDecompAugmented = eigen(diagAugmentation(simGraph$adjacency))
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
aseAugmented = spectralDecompAugmented$vectors[,1:2] %*% diag(sqrt(spectralDecompAugmented$values[1:2]))
plot(ase)
plot(ase, col = tau+1)
plot(ase, col = simGraph$tau+1)
points(centers, cex =3)
points(centers, cex =4, col = "black")
plot(abs(ase))
ase = inverse.rdpg(simGraph$adjacency,2)
plot(ase, col = simGraph$tau+1)
n = 1000
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
ase = inverse.rdpg(simGraph$adjacency,2)
plot(ase, col = simGraph$tau+1)
points(centers, cex = 5)
plot(centers)
points(ase)
points(-ase)
plot(-centers)
points(ase)
plot(ase)
plot(-ase)
points(centers, cex = 8)
points(centers, cex = 8, col = "red")
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
plot(-ase)
points(centers, col = "red")
centers
ase = inverse.rdpg(simGraph$adjacency,2)
plot(-ase)
points(centers, col = "red")
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 500
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
plot(-ase)
points(centers, col = "red", cex = 4)
plot(ase)
points(centers, col = "red", cex = 4)
plot(-ase)
points(centers, col = "red", cex = 4)
points(centers, col = "red", cex = 2)
plot(centers)
points(-ase)
B= matrix(c(0.42, 0.42, 0.42, 0.5), 2,2)
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
centers
plot(centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
points(-ase)
plot(-ase)
points(centers, col = "red", cex = 5)
plot(ase)
points(centers, col = "red", cex = 5)
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 500
movie.dir = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/"
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentation/"
movie.dir3= "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentationAbsASE/"
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 500
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
#occDif = matrix(NA, nrow = length(p_vec), ncol = 2)
#par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
png(paste0(movie.dir2, sprintf("noAugmentedAbsASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
movie.dir2
dir.create(movie.dir2)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
png(paste0(movie.dir2, sprintf("noAugmentedAbsASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
setwd(movie.dir2)
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
require("MCMCpack")
spectralDecompProcrustesBase = eigen(simGraph$adjacency)
aseProcrustes = spectralDecompProcrustesBase$vectors[,1:4] %*% diag(sqrt(spectralDecompProcrustesBase$values[1:4]))
procrustes(ase, aseProcrustes)
resultPro = procrustes(ase, aseProcrustes)
resultPro
resultPro$X.new
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("noAugmentedAbsASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
i
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("noAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
setwd(movie.dir2)
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentation200Nver/"
dir.create(movie.dir2)
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 200
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecompProcrustesBase = eigen(simGraph$adjacency)
aseProcrustes = spectralDecompProcrustesBase$vectors[,1:4] %*% diag(sqrt(spectralDecompProcrustesBase$values[1:4]))
plot(aseProcrustes)
dim(aseProcrustes)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("noAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
system("convert -delay 150 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
p =0.4
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[,2],alignedASE[,3], col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[,2],alignedASE[,4],  col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[,1],alignedASE[,4],  col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
require("rgl")
plot3d(alignedASE[,1:3])
plot3d(alignedASE[,1:3], col = simGraph$tau + 1)
plot3d(alignedASE[,2:4], col = simGraph$tau + 1)
plot(ase[,1], col = simGraph$tau)
n =700
B
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
plot(ase[,1], col = simGraph$tau)
plot(ase[,1], col = simGraph$tau, main = "Embed ASE to 4D but visualize in 1D")
fig.dir
png(paste0(fig.dir, "embedTo4DVisualize1D.png"))
plot(ase[,1], col = simGraph$tau, main = "Embed ASE to 4D but visualize in 1D")
dev.off()
plot(ase[,2], col = simGraph$tau, main = "Embed ASE to 4D but visualize in 1D")
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dim(alignedASE)
plot(alignedASE[, c(1,3)], col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[, c(2,3)], col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[, c(3,3)], col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE[, c(4,3)], col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
pairs(alignedASE)
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
pairs(alignedASE, col = simGraph$tau + 1)
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dim(alignedASE)
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occNoDiagAugmentation200NverPairedPlot/"
dir.create(movie.dir2)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("noAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
dim(ase)
n = 200
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 200
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
#occDif = matrix(NA, nrow = length(p_vec), ncol = 2)
spectralDecompProcrustesBase = eigen(simGraph$adjacency)
aseProcrustes = spectralDecompProcrustesBase$vectors[,1:4] %*% diag(sqrt(spectralDecompProcrustesBase$values[1:4]))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(diagAugmentation(adjacency))
spectralDecomp = eigen(adjacency)
ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("noAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
setwd(movie.dir2)
system("convert -delay 80 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
svd(B)
