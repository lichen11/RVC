plot(ase, col = simGraph$tau+1)
svd(simGraph$adjacency)$d
svd(simGraph$adjacency)$d[1:4]
p_vec = seq(0 , 1, 0.01)
p=0.45
adjacency = simGraph$adjacency
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
ase = inverse.rdpg(diagAugmentation(adjacency), 4)
alignedASE = procrustes(ase, aseProcrustes)$X.new
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 4)
alignedASE = procrustes(ase, aseProcrustes)$X.new
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
help pairs
?pairs
pairs(alignedASE, col = simGraph$tau + 1, diag.panel = c(0,0,0,0), pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
pairs(alignedASE, col = simGraph$tau + 1, diag.panel = c(0,0,0,0), pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo4D/occDiagAugmentation200NverTopEvalsInMagnitude/"
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 200
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
plot(centers)
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
#occDif = matrix(NA, nrow = length(p_vec), ncol = 2)
#spectralDecompProcrustesBase = eigen(simGraph$adjacency)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 4)
paste0(movie.dir2, sprintf("diagAugmentedAlignedASEOccRate%g.png", p))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
# spectralDecomp = eigen(diagAugmentation(adjacency))
# spectralDecomp = eigen(adjacency)
# ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
ase = inverse.rdpg(diagAugmentation(adjacency), 4)
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("diagAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
system("convert -delay 60 *.png occNoDiagAugASEEmbeddedin4Dmovie.gif")
movie.dir2 = "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo2D/occTo2D/"
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
plot(aseProcrustes, col = simGraph$tau + 1)
dim(aseProcrustes)
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
pairs(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
# spectralDecomp = eigen(diagAugmentation(adjacency))
# spectralDecomp = eigen(adjacency)
# ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("diagAugmentedAlignedASEOccRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
system("convert -delay 60 *.png occDiagAugASEEmbeddedTo4Dmovie.gif")
system("convert -delay 50 *.png occDiagAugASEEmbeddedTo2Dmovie.gif")
system("convert -delay 30 *.png occDiagAugASEEmbeddedTo2Dmovie.gif")
p
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
alignedASE
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
sum(adjacency)
movie.dir4= "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo2D/flipTo2D/"
p
p_vec
plot(alignedASE)
plot(aseProcrustes)
movie.dir4= "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo2D/flipTo2D/"
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir4, sprintf("diagAugmentedFlipRate%g.png", p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
sprintf("%gdiagAugmentedFlipRate%g.png", i, p)
length(p_vec)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir4, sprintf("%gdiagAugmentedFlipRate%g.png", i, p)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir4)
system("convert -delay 30 *.png flipTo2DTopEvalInMagnitudemovie.gif")
setwd(movie.dir4)
system("convert -delay 30 *.png flipTo2DTopEvalInMagnitudemovie.gif")
system("convert -delay 30 *.png flipTo2DTopEvalInMagnitudemovie.gif")
sprintf("diagAugmentedFlip%02d.png", i)
sprintf("diagAugmentedFlip%02d.png", 1)
sprintf("diagAugmentedFlip%03d.png", 1)
sprintf("diagAugmentedFlip%03d.png", i)
movie.dir4= "~/Dropbox/Research/Robust_est/simulationExp/moviesEmbedTo2D/flipTo2D/"
png(paste0(movie.dir4, sprintf("diagAugmentedFlip%03d.png", i)), width = 500, height = 500)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
}
ng(paste0(movie.dir4, "diagAugmentedFlip%03d.png"), width = 500, height = 500)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
}
dev.off()
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(diagAugmentation(adjacency))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
png(paste0(movie.dir4, sprintf("flip%03d.png", i)), width = 500, height = 500)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir4)
system("convert -delay 30 *.png flipTo2DTopEvalInMagnitudemovie.gif")
system("convert -delay 15 *.png flipTo2DTopEvalInMagnitudemovie.gif")
movie.dir2
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
# spectralDecomp = eigen(diagAugmentation(adjacency))
# spectralDecomp = eigen(adjacency)
# ase = spectralDecomp$vectors[,1:4] %*% diag(sqrt(spectralDecomp$values[1:4]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
alignedASE = procrustes(ase, aseProcrustes)$X.new
png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(alignedASE, col = simGraph$tau + 1, pch = simGraph$tau,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
dev.off()
}
setwd(movie.dir2)
system("convert -delay 15 *.png occDiagAugASEEmbeddedTo2Dmovie.gif")
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0, 0.2, 0.6, 0.95)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0, 0.2, 0.6, 0.99)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0, 0.5, 0.7, 0.99)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0, 0.4, 0.7, 0.99)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0.15, 0.45, 0.65, 0.95)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0.15, 0.47, 0.65, 0.95)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0.15, 0.47, 0.70, 0.95)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0.15, 0.47, 0.75, 0.95)
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
p_vec = c(0.15, 0.47, 0.75, 0.95)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
#occDif = matrix(NA, nrow = length(p_vec), ncol = 2)
png("~/Dropbox/Research/Robust_est/simulationExp/figs/occASEVaryingOccRate.png")
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
dev.off()
p_vec
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("po=%g", p))
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
#alignedASE = procrustes(ase, aseProcrustes)$X.new
# empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("po=%g", p))
#  occDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
sprintf(expression("p[o]=%g"), p)
expression('p'[o]=%g)
expression('p'[o])
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("po=%g", p))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = expression("p"[o]))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = paste0(expression("p"[o], "=")))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = paste0(expression("p"[o]), "="))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = paste0('expression("p"[o])', "="))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = expression("p"[o] "=d"))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = expression("p"[o]))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = expression("p"[o]=))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = expression("p"[o]"="))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = paste0(expression("p"[o]), "3"))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("po=%g", p))
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2",
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("pl=%g", p))
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2", cex = 2,
cex.lab = 2, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#flipDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2", cex = 2,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#flipDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
png("~/Dropbox/Research/Robust_est/simulationExp/figs/flipASEVaryingFlipRate.png")
par(mfrow = c(2,2))
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
tmp = adjacency[contaminationIndex, contaminationIndex]
adjacency[contaminationIndex, contaminationIndex] = 1 - tmp
#spectralDecomp = eigen(adjacency)
#ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
ase = inverse.rdpg(adjacency, 2)
plot(ase, col = simGraph$tau + 1, pch = simGraph$tau, xlab = "ASE1", ylab = "ASE2", cex = 2,
cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#flipDif[i,] = getSpectralNormDiff(empCov$c1, empCov$c2, theoC1, theoC2)
}
dev.off()
n
