plot(n_vec[1:12], predict(lo2)[1:12], type = 'l', col = 'red', lwd = 4, xlab = "Number of vertices",
ylab = "Spectral norm of (EmpCov2 - TheoCov2)")
dev.off()
png("~/Dropbox/Research/Robust_est/simulationExp/figs/exampleOfIdealCaseCovConvergenceCombinedPlot.png")
par(mfrow=c(1,2))
plot(n_vec[1:12], predict(lo)[1:12], type = 'l', col = 'red', lwd = 4, xlab = "Number of vertices",
ylab = "Spectral norm of (EmpCov1 - TheoCov1)")
plot(n_vec[1:12], predict(lo2)[1:12], type = 'l', col = 'red', lwd = 4, xlab = "Number of vertices",
ylab = "Spectral norm of (EmpCov2 - TheoCov2)")
dev.off()
set.seed(88)
n
n = 500
trainSize = 2/3 * n
trainSize
trainSize = round(2/3 * n)
trainSize
I = sample(1:n, trainSize)
B = matrix(c(0.7, 0.32, 0.32, 0.75), 2,2)
rho = c(0.4, 0.6)
n = 500
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
spectralDecomp = eigen(simGraph$adjacency)
ase = spectralDecomp$vectors[,1:2] %*% diag(sqrt(spectralDecomp$values[1:2]))
g1 <- lda(simGraph$tau ~., ase, subset = (1:n)[-I])
g1 <- lda(simGraph$tau ~., data.frame(ase), subset = (1:n)[-I])
result <- predict(g1, data.frame(ase[I,]))
result
Y.pred <- result$posterior
Y.predClass <- result$class
Y.true <- simGraph$tau[I]
mean(Y.predClass == Y.true)
pred = prediction(Y.pred[, which(colnames(Y.pred) == 1)], Y.true)
require("ROCR")
install.packages("ROCR")
require("ROCR")
install.packages("gdata")
require("gdata")
require("ROCR")
install.packages("bitops")
require("bitops")
require("ROCR")
install.packages("caTools")
require("ROCR")
install.packages("ROCR")
require("ROCR")
pred = prediction(Y.pred[, which(colnames(Y.pred) == 1)], Y.true)
perf = performance(pred,  'tpr', 'fpr')
plot(perf, lwd = 2, box.lty=7, xlim = c(0,1), ylim = c(0,1), main = "ROC (Linear discriminant analysis)")
pred
pred = prediction(Y.pred[, which(colnames(Y.pred) == 2)], Y.true)
perf = performance(pred,  'tpr', 'fpr')
plot(perf, lwd = 2, box.lty=7, xlim = c(0,1), ylim = c(0,1), main = "ROC (Linear discriminant analysis)")
plot(ase)
g1 = lda(simGraph$tau ~., data.frame(ase), subset = (1:n)[-I])
summary(g1)
result = predict(g1, data.frame(ase[I,]))
result
Y.pred = result$posterior
Y.predClass = result$class
Y.true = simGraph$tau[I]
acc = mean(Y.predClass == Y.true)
Y.true
Y.predClass
mean(Y.predClass == Y.true)
perfAUC = performance(pred, 'auc')
perfAUC
g2 = qda(simGraph$tau ~., data.frame(ase), subset = (1:n)[-I])
result = predict(g1, data.frame(ase[I,]))
Y.pred = result$posterior
Y.predClass = result$class
Y.true = simGraph$tau[I]
acc = mean(Y.predClass == Y.true)
acc
require('lda')
demo(mmsb)
source('~/Dropbox/Research/HSBM/generateHSBM.R', echo=TRUE)
require('igraph')
g <- hsbm.game(sum(Nur), Nur, rho.list, B.list, p)
install.packages("NMF")
require("NMF")
install.packages("reshape2")
install.packages(‘plyr’)
install.packages(plyr)
install.packages("plyr")
install.packages('Rcpp')
install.packages('codetools')
install.packages('Rcpp')
install.packages("reshape2")
install.packages("plyr")
install.packages("NMF")
install.packages"pkgmaker")
install.packages("pkgmaker")
install.packages("registry")
install.packages("pkgmaker")
install.packages("diget")
install.packages("digest")
install.packages("pkgmaker")
install.packages("table")
install.packages("xtable")
install.packages("pkgmaker")
install.packages("NMF")
install.packages('doParallel')
install.packages('foreach')
install.packages('iterators')
install.packages('foreach')
install.packages('doParallel')
install.packages("NMF")
install.packages("cluster")
install.packages("NMF")
install.packages("RColorBrewer")
install.packages("NMF")
install.packages("lda")
install.packages("lda")
install.packages("R.matlab")
setwd("~/Dropbox/Research/Robust_est/simulationExp/")
source('~/Dropbox/Research/Robust_est/simulationExp/getElbows.R')
source("~/Dropbox/Research/Local embedding/stfp.R")
require("Rlab")
install.packages("Rlab")
require("Rlab")
#########################################################################################
getCentersAndDelta = function(B, rho) {
centers = eigen(B)$vector %*% diag(sqrt(eigen(B)$values))
#centers = diag(sqrt(eigen(B)$values)) %*%  eigen(B)$vector
x1 = centers[1,]
x2 = centers[2,]
delta = outer(x1,x1)*rho[1] + outer(x2, x2)*rho[2]
return(list(delta = delta, centers = centers))
}
getCovMat = function(x, rho, delta, centers){
tmp11 = outer(centers[1,], centers[1,])
tmpx1 = t(x) %*% centers[1,]
tmp12 = tmpx1 - (tmpx1)^2
middle1 = as.numeric(tmp12) * tmp11
tmp21 = outer(centers[2,], centers[2,])
tmpx2 = t(x) %*% centers[2,]
tmp22 = tmpx2 - (tmpx2)^2
middle2 = tmp21 * as.numeric(tmp22)
middle = rho[1]*middle1 + rho[2]*middle2
theoCov = solve(delta)   %*% middle %*% solve(delta)
return(theoCov)
}
rg.sample = function(P){
n <-  nrow(P)
U <- matrix(0, nrow = n, ncol = n)
set.seed(88)
U[col(U) > row(U)] <- runif(n*(n-1)/2)
U <- (U + t(U))
A <- (U < P) + 0 ;
diag(A) <- 0
return(A)
}
sampleSBMfromTrueLatentPosition = function(n, rho, centers){
set.seed(88)
x1 = centers[1,]
x2 = centers[2,]
priorVec  = rbern(n, rho[2])
tau = priorVec + 1
trueLatentPosition = priorVec %*% t(x2) + (1 - priorVec) %*% t(x1)
P = trueLatentPosition %*% t(trueLatentPosition)
A = rg.sample(P)
return(list(adjacency = A, tau = tau))
}
getSpectralEstAndCov = function(A, tau, d){
spectralDecomp = eigen(A)
ase = spectralDecomp$vectors[,1:d] %*% diag(sqrt(spectralDecomp$values[1:d]))
c1 = var(sqrt(n)*ase[tau ==1,])
c2 = var(sqrt(n)*ase[tau ==2,])
return(list(c1 = c1, c2 = c2))
}
getSpectralNormDiff = function(c1, c2, theoC1, theoC2) {
dif1 = norm(c1-theoC1, "2")
dif2 = norm(c2-theoC2, "2")
return(cbind(dif1, dif2))
}
getSpectralNormDifferenceFullFcn = function(B, rho, n, d){
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
empCov = getSpectralEstAndCov(simGraph$adjacency, simGraph$tau, d)
dif1 = norm(empCov$c1-theoC1, "2")
dif2 = norm(empCov$c2-theoC2, "2")
return(cbind(dif1, dif2))
}
diagAugmentation <- function(A){
n = nrow(A)
s <- rowSums(A)
L <- diag(s)/(n-1) + A
return(L)
}
inverse.rdpg = function(A, dim, G = NULL, scaling = FALSE){
if(is.list(A)){
for(i in 1:length(A)){
if(i == 1){
X <- svd.extract(A[[i]], dim, scaling)
}
else{
X <- cbind(X, svd.extract(A[[i]], dim, scaling))
}
}
}
else{
X <- svd.extract(A,dim, scaling)
}
#X.mclust <- Mclust(X, G)
#return(list(X = X, cluster = X.mclust))
return(X = X)
}
B = matrix(c(0.5, 0.42, 0.42, 0.55), 2,2)
rho = c(0.4, 0.6)
n = 200
tmp = getCentersAndDelta(B, rho)
delta = tmp$delta
centers = tmp$centers
rm(tmp)
theoC1 = getCovMat(centers[1,], rho, delta, centers)
theoC2 = getCovMat(centers[2,], rho, delta, centers)
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
scree_selected_mat = matrix(NA, nrow = length(p_vec), ncol = 3)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(88)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
sing_val = svd(adjacency)$d[1:20]
scree_selected_mat[i,] = getElbows(sing_val, n = 3, threshold = F, plot = F)
#ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
#    cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#dev.off()
}
scree_selected_mat
p_vec = seq(0 , 1, 0.01)
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
scree_selected_mat = matrix(NA, nrow = length(p_vec), ncol = 3)
for (i in 1:length(p_vec)){
p = p_vec[i]
adjacency = simGraph$adjacency
set.seed(i)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
sing_val = svd(adjacency)$d[1:20]
scree_selected_mat[i,] = getElbows(sing_val, n = 3, threshold = F, plot = F)
#ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
#    cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#dev.off()
}
scree_selected_mat
p = 0.74
nsim = 500
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
scree_selected_mat2 = matrix(NA, nrow = nsim, ncol = 3)
for (i in 1:nsim){
adjacency = simGraph$adjacency
set.seed(i)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
sing_val = svd(adjacency)$d[1:20]
scree_selected_mat2[i,] = getElbows(sing_val, n = 3, threshold = F, plot = F)
#ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
#    cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#dev.off()
}
scree_selected_mat2
p = 0.74
nsim = 500
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
scree_selected_mat2 = matrix(NA, nrow = nsim, ncol = 3)
for (i in 1:nsim){
adjacency = simGraph$adjacency
set.seed(i)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
sing_val = svd(adjacency)$d#[1:20]
scree_selected_mat2[i,] = getElbows(sing_val, n = 3, threshold = F, plot = F)
#ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
#    cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#dev.off()
}
scree_selected_mat2
getElbows(sing_val, n = 3, threshold = F, plot = T)
p = 0.74
nsim = 500
simGraph = sampleSBMfromTrueLatentPosition(n, rho, centers)
aseProcrustes = inverse.rdpg(diagAugmentation(simGraph$adjacency), 2)
scree_selected_mat2 = matrix(NA, nrow = nsim, ncol = 3)
for (i in 1:nsim){
adjacency = simGraph$adjacency
set.seed(i)
contaminationIndex = sample(1:n, round(n*p))
adjacency[contaminationIndex, contaminationIndex] = matrix(0, nrow = length(contaminationIndex), ncol = length(contaminationIndex))
sing_val = svd(adjacency)$d[1:22]
scree_selected_mat2[i,] = getElbows(sing_val, n = 3, threshold = F, plot = F)
#ase = inverse.rdpg(diagAugmentation(adjacency), 2)
#png(paste0(movie.dir2, sprintf("occ%03d.png", i)), width = 500, height = 500)
#empCov = getSpectralEstAndCov(adjacency, simGraph$tau, 2)
#plot(ase, col = simGraph$tau + 1, pch = simGraph$tau,
#    cex.lab = 1.5, cex.axis = 2, cex.main =2, main = sprintf("p=%g", p))
#dev.off()
}
scree_selected_mat2
genG <- function(n=1000,m=100) {
(R <- n/m)
Kvec <- c(4,3)
p <- 0.01
(b2vec <- c(.25,.50,.25) * m)
(mlist <- list(rep(m/Kvec[1],Kvec[1]),b2vec)); sapply(mlist, sum)
rho <- lapply(mlist, function(x) x / m)
cvec <- c(1/4,1/2,2/5,1/5)
nc <- length(cvec)
##  B = c1*J + c2*I
B1 <- cvec[1]*matrix(1,Kvec[1],Kvec[1]) + cvec[2]*diag(Kvec[1])
B2 <- cvec[3]*matrix(1,Kvec[2],Kvec[2]) + cvec[4]*diag(Kvec[2])
Blist <- c(rep(list(B1),R/2),rep(list(B2),R/2))
mlist2 <- rep(list(m),R)
rholist <- c(rep(list(rho[[1]]),R/2), rep(list(rho[[2]]),R/2))
set.seed(12345)
g <- hsbm.game(n,mlist2,rholist,Blist,p)
A <- g[]
(cl <- rep(1:length(Kvec), each=R/length(Kvec)))
return(list(g=g,cl=cl,m=m))
}
tmp = genG
tmp
g
tmp = genG(1000, 100)
require("igraph")
tmp = genG(1000, 100)
tmp$g
tmp$cl
tmp$m
out <- genG(n=360,m=60)
g <- out$g
cl <- out$cl
m <- out$m
m
cl
N <- 200
in.deg  <- sample(1:N, N, replace = TRUE, prob = exp(-.5*1:N))
G <-degree.sequence.game(in.deg=in.deg,out.deg=in.deg,method="simple.no.multiple")
G
get.vertex.attribute(G)
get.vertex.attribute(G, 'value')
get.vertex.attribute(G, 'label')
degree(G)
G
degree(G)>2
sum(degree(G)>2)
table(degree(G))
out <- genG(n=360,m=60)
g <- out$g
cl <- out$cl
m <- out$m
m
g
library("igraph")
library("fpc")
library("popbio")
reembed <- function(g, dmax, pamkout){
X.list <- list()
for(i in 1:pamkout$nc){
idx.i <- which(pamkout$pamobject$clustering == i)
gi <- g[idx.i,idx.i]
Xhat.i <- embed_adjacency_matrix(graph.adjacency(gi), dmax)$X
## eval <- sqrt(colSums(Xhat.i^2))
## dhat <- dimSelect(eval)
X.list[[i]] <- Xhat.i
}
return(X.list)
}
rect.dist <- function(X,Y){
n <- nrow(X)
m <- nrow(Y)
tmp1 <- X%*%t(Y)
tmp2 <- outer(rep(1, n), rowSums(Y^2))
tmp3 <- outer(rowSums(X^2), rep(1,m))
D <- tmp2 - 2*tmp1 + tmp3
return(D)
}
kernel.stat <- function(X,Y,sigma=0.2){
n <- nrow(X)
m <- nrow(Y)
tmpXX <- sum(exp(-(as.matrix(dist(X))^2)/(2*sigma^2))) - n
tmpYY <- sum(exp(-(as.matrix(dist(Y))^2)/(2*sigma^2))) - m
tmpXY <- sum(exp(-(rect.dist(X,Y))/(2*sigma^2)))
tmp <- tmpXX/(n*(n-1)) + tmpYY/(m*(m-1)) - 2*tmpXY/(m*n)
return((m+n)*tmp)
}
find.transform <- function(X,Y){
u <- apply(X,2,median)
v <- apply(Y,2,median)
if(ncol(X) == 1){
T <- sign(u/v)
}
else{
T <- diag(sign(u/v))
}
return(T)
}
computeS <- function(X.list, sigma){
K <- length(X.list)
S <- matrix(0, K, K)
for(i in 1:(K-1)){
for(j in (i+1):K){
Tij <- find.transform(X.list[[i]], X.list[[j]])
S[i,j] <- kernel.stat(X.list[[i]] %*% Tij, X.list[[j]], sigma)
S[j,i] <- S[i,j]
}
}
return(S)
}
set.seed(1234)
R <- 8
(nR.vec <- 200+100*ceiling(5*runif(R)))
vlab <- unlist(sapply(1:R,function(x) rep(x,nR.vec[x])))
mlab <- rep(motif.vec, times=nR.vec)
p <- 0.01
B.list <- list()
rho.list <- list()
for(r in 1:R){
if(motif.vec[r] == 1){
B.list[[r]] <- matrix(0.25,3,3);
diag(B.list[[r]]) <- .4
rho.list[[r]] <- c(0.25, 0.5, 0.25)
} else if(motif.vec[r] == 2) {
B.list[[r]] <- matrix(0.2,3,3);
diag(B.list[[r]]) <- .25; B.list[[r]][2,2] <- .8
rho.list[[r]] <- c(0.3, 0.4, 0.3)
} else {
B.list[[r]] <- matrix(0.25,3,3);
diag(B.list[[r]]) <- 0.3; B.list[[r]][3,3] <- .7
rho.list[[r]] <- c(0.4, 0.2, 0.4)
}
}
rho.list
(motif.vec <- sample(1:3, R, replace = TRUE))
vlab <- unlist(sapply(1:R,function(x) rep(x,nR.vec[x])))
mlab <- rep(motif.vec, times=nR.vec)
p <- 0.01
B.list <- list()
rho.list <- list()
for(r in 1:R){
if(motif.vec[r] == 1){
B.list[[r]] <- matrix(0.25,3,3);
diag(B.list[[r]]) <- .4
rho.list[[r]] <- c(0.25, 0.5, 0.25)
} else if(motif.vec[r] == 2) {
B.list[[r]] <- matrix(0.2,3,3);
diag(B.list[[r]]) <- .25; B.list[[r]][2,2] <- .8
rho.list[[r]] <- c(0.3, 0.4, 0.3)
} else {
B.list[[r]] <- matrix(0.25,3,3);
diag(B.list[[r]]) <- 0.3; B.list[[r]][3,3] <- .7
rho.list[[r]] <- c(0.4, 0.2, 0.4)
}
}
rho.list
g <- sample_hierarchical_sbm(sum(nR.vec), nR.vec, rho.list, B.list, p)
install_url("http://www.cis.jhu.edu/~parky/XDATA/igraph_0.7.999.tar.gz")
install.packages("devtools")
install.packages("httr")
install.packages("RCurl")
install.packages("bitops")
install.packages("RCurl")
install.packages("httr")
install.packages("devtools")
install_url("http://www.cis.jhu.edu/~parky/XDATA/igraph_0.7.999.tar.gz")
require("devtools")
install_url("http://www.cis.jhu.edu/~parky/XDATA/igraph_0.7.999.tar.gz")
install.packages("lazyeval")
install.packages("lazyeval")
out <- genG(n=360,m=60)
g <- out$g
cl <- out$cl
m <- out$m
m
g
cl
cl*(60)
rep(1,2)
tau = c(rep(1, 60*3), rep(2, 60*3))
A = graph.adjacency(a)
A = graph.adjacency(g)
?graph.adjacency
require("igraph")
?graph.adjacency
